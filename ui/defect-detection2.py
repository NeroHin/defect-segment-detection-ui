# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'defect-detection.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtTest import QTest


import cv2
from PIL import Image, ImageDraw
from PIL.ImageQt import ImageQt
import os
import time
import subprocess
import ast
from xywh2xyxy import xywh2xyxy
from dice_coef import dice_average_sets, dice_coef


class Ui_Form(object):

    def __init__(self):
        self.folderPath = ''
        self.image_folder = ''
        self.label_folder = ''
        self.mask_folder = ''
        self.bbox_folder = ''
        self.interval = 2000
        self.each_class_ap50 = dict()
        self.predict_classes = str()
        self.file_path = str()
        self.detect_image = str()
        self.segment_image = str()
        self.predict_bbox = list()
        self.ground_truth_bbox_path = 'script/yolov7/defect/labels/test'
        self.ground_truth_bbox = list()
        self.calculate_mean_iou = list()
        self.dice_coef = float()

    def selectFolder(self):
        ''' Select Image of Folder '''

        # Open File Dialog
        folderPath = QFileDialog.getExistingDirectory(
            None, 'Select a folder:', './', QFileDialog.ShowDirsOnly)

        # if user click cancel, then return to the main window
        if folderPath == '':
            return None

        # image folder
        image_folder = os.path.join(folderPath, 'image')

        # ground truth folder
        label_folder = os.path.join(folderPath, 'label')

        # ground truth mask folder
        mask_folder = os.path.join(folderPath, 'mask')

        # bbox folder
        bbox_folder = os.path.join(folderPath, 'bbox')

        # Count Images number in folder
        numOfImages = len([name for name in os.listdir(
            image_folder) if os.path.isfile(os.path.join(image_folder, name))])

        if image_folder:
            self.folderImageNum.setText(f'{ numOfImages }')

        os.chdir(path='../script/yolov7')
        # run python3 test.py --weights best.pt --data defect.yaml --task test
        args = "--weights best.pt --data defect.yaml --task test "
        return_value = subprocess.run(
            [f"python3 test.py {args}"], stdout=subprocess.PIPE, universal_newlines=True, shell=True).stdout.splitlines()[-1]

        self.each_class_ap50 = ast.literal_eval(node_or_string=return_value)

        for item, key in self.each_class_ap50.items():
            if item == 'powder_uncover':
                self.uncoverAPScore.setText(f'{ round(key, 3) }')
            elif item == 'powder_uneven':
                self.unevenAPScore.setText(f'{ round(key, 3) }')
            else:
                self.scratchAPScore.setText(f'{ round(key, 3) }')

        self.folderPath = folderPath
        self.image_folder = image_folder
        self.label_folder = label_folder
        self.mask_folder = mask_folder
        self.bbox_folder = bbox_folder

    def displayOriginalImage(self, img=None, image_path: str = None):
        ''' Display Image '''

        if image_path is not None:
            # Read Image
            pixmap = QPixmap(image_path)
            resized_pixmap = pixmap.scaled(self.originalImage.height(), self.originalImage.width(
            ), QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
            self.originalImage.setPixmap(resized_pixmap)
        if img is not None:
            pixmap = QPixmap.fromImage(ImageQt(img))
            resized_pixmap = pixmap.scaled(self.originalImage.height(), self.originalImage.width(
            ), QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
            self.originalImage.setPixmap(resized_pixmap)

    def displayPredictImage(self, image_path: str):
        ''' Display Detect Image '''

        # Read Image
        pixmap = QPixmap(image_path)
        resized_pixmap = pixmap.scaled(self.detectImage.height(), self.detectImage.width(
        ), QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
        self.detectImage.setPixmap(resized_pixmap)

    def displaySegmentImage(self, image_path: str):
        ''' Display Detect Image '''

        # Read Image
        pixmap = QPixmap(image_path)
        resized_pixmap = pixmap.scaled(self.detectImage.height(), self.detectImage.width(
        ), QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
        self.segmentImage.setPixmap(resized_pixmap)

    def detectDefectsEvent(self):

        # Get Folder Path
        if self.folderPath == '':
            reply = QMessageBox.information(
                None, 'Warning', 'Please select a folder first', QMessageBox.Ok)

            # if user click ok, then return to the main window
            if reply == QMessageBox.Ok:
                return None

        # Open File Dialog
        # the Dialog only can select .png or .jpg file and folder
        self.file_path, _ = QFileDialog.getOpenFileNames(
            None, "Select a single file or multiple", "", "Images (*.png *.jpg)")

        # if user click cancel, then return to the main window
        if self.file_path == '':
            return None

        if len(self.file_path) == 1:
            self.image_path = self.file_path[0]

            filename = self.image_path.split('/')[-1]

            # find the index of the image in the self.image_folder
            self.currentImgNum.setText('1')

            self.originalImageText.setText(filename)

            # display current image class
            # read label file and get the class

            img_label_path = self.label_folder + \
                '/' + filename.split('.')[0] + '.txt'

            img_bbox_path = self.bbox_folder + \
                '/' + filename.split('.')[0] + '_bbox.png'

            img_label = open(img_label_path, 'r')
            ground_truth_bbox_list = []

            selected_img = Image.open(self.image_path)

            w, h = selected_img.size

            for line in img_label.readlines():
                classes = line.split(' ')[0]
                if classes == '0':
                    self.groundTruthTypeText.setText('powder_uncover')
                elif classes == '1':
                    self.groundTruthTypeText.setText('powder_uneven')
                else:
                    self.groundTruthTypeText.setText('scratch')

                gt_bbox = line.split(' ')[1:5]
                gt_bbox[-1] = gt_bbox[-1].strip('\n')
                gt_bbox = [round(float(i), 6) for i in gt_bbox]

                ground_truth_bbox_list.append(gt_bbox)

            self.displayOriginalImage(image_path=img_bbox_path)

            # if getcwd() is not the yolov7 folder, then change the directory to yolov7
            if os.getcwd().split('/')[-1] != 'yolov7':
                if os.getcwd().split('/')[-2] == 'script':
                    os.chdir('../yolov7')
                else:
                    os.chdir('../script/yolov7')

            # run python3 test.py --weights best.pt --data defect.yaml --task test
            args = f"--weights best.pt --conf 0.4 --img-size 640 --source  { self.image_path } --save-txt --save-conf "
            return_value = subprocess.run(
                [f"python3 detect.py {args}"], stdout=subprocess.PIPE, universal_newlines=True, shell=True).stdout.splitlines()

            # for index, value in enumerate(return_value):
            #     print(f'{index} : {value}')

            # get inference time
            self.scoreOfFPS.setText(return_value[9])

            # get the predict image path
            self.detect_image = return_value[-1]

            # get the predict class
            self.predict_classes = return_value[-3]

            # display the predict class
            self.predictTypeText.setText(self.predict_classes)

            # display the predict image
            self.displayPredictImage(self.detect_image)

            # display the predict image name
            self.detectImageText_.setText(return_value[-1].split('/')[-1])

            pre_bbox_list = []
            pre_bbox = self.detect_image.split('/')[0] + '/' + self.detect_image.split('/')[1] + '/' + self.detect_image.split('/')[
                2] + '/labels/' + self.detect_image.split('/')[-1].split('.')[0] + '.txt'

            # read the predict bbox
            for line in open(pre_bbox, 'r').readlines():
                pre_bbox_list.append(line.split(' ')[1:5])

            self.predict_bbox = [[float(x) for x in sublist]
                                 for sublist in pre_bbox_list]
            self.ground_truth_bbox = [
                [float(x) for x in sublist] for sublist in ground_truth_bbox_list]

            if len(self.predict_bbox) != len(self.ground_truth_bbox):
                reply = QMessageBox.information(
                    None, 'Warning', 'The number of predict bbox and ground truth bbox is not equal', QMessageBox.Ok)

                # if user click ok, then return to the main window
                if reply == QMessageBox.Ok:
                    return None

            else:
                mean_iou = []
                for bbox in range(0, len(self.predict_bbox)):
                    # calculate the iou
                    bbox2 = xywh2xyxy(
                        data=self.predict_bbox[bbox], img_w=w, img_h=h)
                    bbox1 = xywh2xyxy(
                        data=self.ground_truth_bbox[bbox], img_w=w, img_h=h)

                    xi1 = max(bbox1[0], bbox2[0])
                    yi1 = max(bbox1[1], bbox2[1])
                    xi2 = min(bbox1[2], bbox2[2])
                    yi2 = min(bbox1[3], bbox2[3])
                    inter_area = (yi2 - yi1) * (xi2 - xi1)

                    box1_area = (bbox1[2] - bbox1[0]) * (bbox1[3] - bbox1[1])
                    box2_area = (bbox2[2] - bbox2[0]) * (bbox2[3] - bbox2[1])

                    union_area = box1_area + box2_area - inter_area

                    iou = inter_area / union_area

                    mean_iou.append(iou)
                print(mean_iou)
                print(f"mean iou: {sum(mean_iou)/len(mean_iou)}")
                self.scoreOfIoU.setText(f"{sum(mean_iou)/len(mean_iou)}")

        elif len(self.file_path) >= 2:
            self.image_folder = self.file_path

            for index, filename in enumerate(self.image_folder):

                # image path

                self.image_path = filename

                filename = filename.split('/')[-1]

                # find the index of the image in the self.image_folder
                self.currentImgNum.setText(str(index + 1))

                self.originalImageText.setText(filename)

                # display current image class
                # read label file and get the class

                img_label_path = self.label_folder + \
                    '/' + filename.split('.')[0] + '.txt'

                img_bbox_path = self.bbox_folder + \
                    '/' + filename.split('.')[0] + '_bbox.png'

                img_label = open(img_label_path, 'r')
                ground_truth_bbox_list = []

                selected_img = Image.open(self.image_path)

                w, h = selected_img.size

                for line in img_label.readlines():
                    classes = line.split(' ')[0]
                    if classes == '0':
                        self.groundTruthTypeText.setText('powder_uncover')
                    elif classes == '1':
                        self.groundTruthTypeText.setText('powder_uneven')
                    else:
                        self.groundTruthTypeText.setText('scratch')

                    gt_bbox = line.split(' ')[1:5]
                    gt_bbox[-1] = gt_bbox[-1].strip('\n')
                    gt_bbox = [round(float(i), 6) for i in gt_bbox]

                    ground_truth_bbox_list.append(gt_bbox)

                self.displayOriginalImage(image_path=img_bbox_path)

                # if getcwd() is not the yolov7 folder, then change the directory to yolov7
                if os.getcwd().split('/')[-1] != 'yolov7':
                    if os.getcwd().split('/')[-2] == 'script':
                        os.chdir('../yolov7')
                    else:
                        os.chdir('../script/yolov7')

                # run python3 test.py --weights best.pt --data defect.yaml --task test
                args = f"--weights best.pt --conf 0.4 --img-size 640 --source  { self.image_path } --save-txt --save-conf "
                return_value = subprocess.run(
                    [f"python3 detect.py {args}"], stdout=subprocess.PIPE, universal_newlines=True, shell=True).stdout.splitlines()

                # for index, value in enumerate(return_value):
                #     print(f'{index} : {value}')

                # get inference time
                self.scoreOfFPS.setText(return_value[9])

                # get the predict image path
                self.detect_image = return_value[-1]

                # get the predict class
                self.predict_classes = return_value[-3]

                # display the predict class
                self.predictTypeText.setText(self.predict_classes)

                # display the predict image
                self.displayPredictImage(self.detect_image)

                # display the predict image name
                self.detectImageText_.setText(return_value[-1].split('/')[-1])

                pre_bbox_list = []
                pre_bbox = self.detect_image.split('/')[0] + '/' + self.detect_image.split('/')[1] + '/' + self.detect_image.split('/')[
                    2] + '/labels/' + self.detect_image.split('/')[-1].split('.')[0] + '.txt'

                # read the predict bbox
                for line in open(pre_bbox, 'r').readlines():
                    pre_bbox_list.append(line.split(' ')[1:5])

                self.predict_bbox = [[float(x) for x in sublist]
                                     for sublist in pre_bbox_list]
                self.ground_truth_bbox = [
                    [float(x) for x in sublist] for sublist in ground_truth_bbox_list]

                if len(self.predict_bbox) != len(self.ground_truth_bbox):
                    reply = QMessageBox.information(
                        None, 'Warning', 'The number of predict bbox and ground truth bbox is not equal', QMessageBox.Ok)

                    # if user click ok, then return to the main window
                    if reply == QMessageBox.Ok:
                        return None

                else:
                    mean_iou = []
                    for bbox in range(0, len(self.predict_bbox)):
                        # calculate the iou
                        bbox2 = xywh2xyxy(
                            data=self.predict_bbox[bbox], img_w=w, img_h=h)
                        bbox1 = xywh2xyxy(
                            data=self.ground_truth_bbox[bbox], img_w=w, img_h=h)

                        xi1 = max(bbox1[0], bbox2[0])
                        yi1 = max(bbox1[1], bbox2[1])
                        xi2 = min(bbox1[2], bbox2[2])
                        yi2 = min(bbox1[3], bbox2[3])
                        inter_area = (yi2 - yi1) * (xi2 - xi1)

                        box1_area = (bbox1[2] - bbox1[0]) * \
                            (bbox1[3] - bbox1[1])
                        box2_area = (bbox2[2] - bbox2[0]) * \
                            (bbox2[3] - bbox2[1])

                        union_area = box1_area + box2_area - inter_area

                        iou = inter_area / union_area

                        mean_iou.append(iou)
                    print(mean_iou)
                    print(f"mean iou: {sum(mean_iou)/len(mean_iou)}")
                    self.scoreOfIoU.setText(f"{sum(mean_iou)/len(mean_iou)}")

                QTest.qWait(self.interval)

    def segmentDefectsEvent(self):

        # Get Folder Path

        if self.folderPath == '':
            reply = QMessageBox.information(
                None, 'Warning', 'Please select a folder first', QMessageBox.Ok)

            # if user click ok, then return to the main window
            if reply == QMessageBox.Ok:
                return None

        # Open File Dialog
        # the Dialog only can select .png or .jpg file and folder
        self.file_path, _ = QFileDialog.getOpenFileNames(
            None, "Select a single file or multiple", "", "Images (*.png *.jpg)")

        # if user click cancel, then return to the main window
        if self.file_path == '':
            return None

        if len(self.file_path) == 1:
            self.image_path = self.file_path[0]

            filename = self.image_path.split('/')[-1]

            # display current image number
            # find the index of the image in the self.image_folder
            self.currentImgNum.setText(
                f'{ os.listdir(self.image_folder).index(filename) + 1}')
            self.originalImageText.setText(filename)

            # display current image class
            # read label file and get the class
            img_label_path = self.label_folder + \
                '/' + filename.split('.')[0] + '.txt'
            img_label = open(img_label_path, 'r')

            img_mask_path = self.mask_folder + \
                '/' + filename.split('.')[0] + '.png'

            for line in img_label.readlines():
                classes = line.split(' ')[0]
                if classes == '0':
                    self.groundTruthTypeText.setText('powder_uncover')
                elif classes == '1':
                    self.groundTruthTypeText.setText('powder_uneven')
                else:
                    self.groundTruthTypeText.setText('scratch')

            # if getcwd() is not the yolov7 folder, then change the directory to yolov7
            if os.getcwd().split('/')[-1] != 'unet':
                if os.getcwd().split('/')[-2] == 'script':
                    os.chdir('../unet')
                else:
                    os.chdir('../script/unet')

            args = f"--model unet_best.pth --input { self.image_path } --output output/{ self.image_path.split('/')[-1] } "
            return_value = subprocess.run(
                [f"python3 predict.py {args}"], stdout=subprocess.PIPE, universal_newlines=True, shell=True).stdout.splitlines()

            for index, value in enumerate(return_value):
                print(f'{index} : {value}')

            # get inference time
            self.scoreOfFPS.setText(return_value[0])

            # get the predict image path
            self.segment_image = return_value[1]

            # display the segment image
            self.displaySegmentImage(image_path=self.segment_image)

            # display the mask image
            self.displayOriginalImage(img=self.mask_folder + '/' + filename)

            # display image name
            self.segmentImageText.setText(self.segment_image.split('/')[-1])

            gt_mask = cv2.imread(
                (self.mask_folder + '/' + filename), cv2.IMREAD_GRAYSCALE)
            pred_mask = cv2.imread((self.segment_image), cv2.IMREAD_GRAYSCALE)

            # calculate the dice_coefficient
            self.dice_coef = dice_coef(y_true=gt_mask, y_pred=pred_mask)

            # display the dice coefficient
            self.scoreOfDC.setText(f'{self.dice_coef}')

        elif len(self.file_path) >= 2:

            self.image_folder = self.file_path

            for index, filename in enumerate(self.image_folder):

                self.image_path = filename

                filename = filename.split('/')[-1]

                # find the index of the image in the self.image_folder
                self.currentImgNum.setText(str(index + 1))
                self.originalImageText.setText(filename)

                # display current image class
                # read label file and get the class
                img_label_path = self.label_folder + \
                    '/' + filename.split('.')[0] + '.txt'
                img_label = open(img_label_path, 'r')

                img_mask_path = self.mask_folder + \
                    '/' + filename.split('.')[0] + '.png'

                for line in img_label.readlines():
                    classes = line.split(' ')[0]
                    if classes == '0':
                        self.groundTruthTypeText.setText('powder_uncover')
                    elif classes == '1':
                        self.groundTruthTypeText.setText('powder_uneven')
                    else:
                        self.groundTruthTypeText.setText('scratch')

                # if getcwd() is not the yolov7 folder, then change the directory to yolov7
                if os.getcwd().split('/')[-1] != 'unet':
                    if os.getcwd().split('/')[-2] == 'script':
                        os.chdir('../unet')
                    else:
                        os.chdir('../script/unet')

                args = f"--model unet_best.pth --input { self.image_path } --output output/{ self.image_path.split('/')[-1] } "
                return_value = subprocess.run(
                    [f"python3 predict.py {args}"], stdout=subprocess.PIPE, universal_newlines=True, shell=True).stdout.splitlines()

                # get inference time
                self.scoreOfFPS.setText(return_value[0])

                # get the predict image path
                self.segment_image = return_value[1]

                # display the segment image
                self.displaySegmentImage(image_path=self.segment_image)

                # display the mask image
                self.displayOriginalImage(
                    img=self.mask_folder + '/' + filename)

                # display image name
                self.segmentImageText.setText(
                    self.segment_image.split('/')[-1])

                gt_mask = cv2.imread(
                    (self.mask_folder + '/' + filename), cv2.IMREAD_GRAYSCALE)
                pred_mask = cv2.imread(
                    (self.segment_image), cv2.IMREAD_GRAYSCALE)

                # calculate the dice_coefficient
                self.dice_coef = dice_coef(y_true=gt_mask, y_pred=pred_mask)

                # display the dice coefficient
                self.scoreOfDC.setText(f'{self.dice_coef}')

            QTest.qWait(self.interval)

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1143, 721)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        Form.setFont(font)

        # Btn Group

        # Select Folder Button
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 20, 1111, 71))
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        self.horizontalLayoutWidget.setFont(font)
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.btnLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.btnLayout.setContentsMargins(0, 0, 0, 0)
        self.btnLayout.setObjectName("btnLayout")
        self.selectFolderBtn = QtWidgets.QPushButton(
            self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(20)
        self.selectFolderBtn.setFont(font)
        self.selectFolderBtn.setObjectName("selectFolderBtn")
        self.btnLayout.addWidget(self.selectFolderBtn)
        # Click to batch select images from a folder
        self.selectFolderBtn.clicked.connect(self.selectFolder)
        ##############################

        # Detect Defects Button
        self.detectDefectsBtn = QtWidgets.QPushButton(
            self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(20)
        self.detectDefectsBtn.setFont(font)
        self.detectDefectsBtn.setObjectName("detectDefectsBtn")
        self.btnLayout.addWidget(self.detectDefectsBtn)
        # when i click this button, i want to run the detect function
        self.detectDefectsBtn.clicked.connect(self.detectDefectsEvent)

        ##############################
        self.segmentBtn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(20)
        self.segmentBtn.setFont(font)
        self.segmentBtn.setObjectName("segmentBtn")
        self.btnLayout.addWidget(self.segmentBtn)
        # when i click this button, i want to run the segment function
        self.segmentBtn.clicked.connect(self.segmentDefectsEvent)

        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_2.setGeometry(
            QtCore.QRect(10, 150, 1111, 331))
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        self.horizontalLayoutWidget_2.setFont(font)
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.imgLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.imgLayout.setContentsMargins(0, 0, 0, 0)
        self.imgLayout.setObjectName("imgLayout")
        self.originalImage = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        self.originalImage.setFont(font)
        self.originalImage.setFrameShape(QtWidgets.QFrame.Box)
        self.originalImage.setText("")
        self.originalImage.setAlignment(QtCore.Qt.AlignCenter)
        self.originalImage.setObjectName("originalImage")
        self.imgLayout.addWidget(self.originalImage)
        self.detectImage = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        self.detectImage.setFont(font)
        self.detectImage.setFrameShape(QtWidgets.QFrame.Box)
        self.detectImage.setText("")
        self.detectImage.setAlignment(QtCore.Qt.AlignCenter)
        self.detectImage.setObjectName("detectImage")
        self.imgLayout.addWidget(self.detectImage)
        self.segmentImage = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        self.segmentImage.setFont(font)
        self.segmentImage.setFrameShape(QtWidgets.QFrame.Box)
        self.segmentImage.setText("")
        self.segmentImage.setAlignment(QtCore.Qt.AlignCenter)
        self.segmentImage.setObjectName("segmentImage")
        self.imgLayout.addWidget(self.segmentImage)
        self.horizontalLayoutWidget_11 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_11.setGeometry(
            QtCore.QRect(760, 490, 261, 41))
        self.horizontalLayoutWidget_11.setObjectName(
            "horizontalLayoutWidget_11")
        self.dcLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_11)
        self.dcLayout.setContentsMargins(0, 0, 0, 0)
        self.dcLayout.setObjectName("dcLayout")
        self.diceCoefficientText = QtWidgets.QLabel(
            self.horizontalLayoutWidget_11)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.diceCoefficientText.setFont(font)
        self.diceCoefficientText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.diceCoefficientText.setObjectName("diceCoefficientText")
        self.dcLayout.addWidget(self.diceCoefficientText)
        self.scoreOfDC = QtWidgets.QLabel(self.horizontalLayoutWidget_11)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.scoreOfDC.setFont(font)
        self.scoreOfDC.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.scoreOfDC.setObjectName("scoreOfDC")
        self.dcLayout.addWidget(self.scoreOfDC)
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setGeometry(QtCore.QRect(10, 110, 1111, 26))
        self.widget.setObjectName("widget")
        self.imgTextLayout = QtWidgets.QHBoxLayout(self.widget)
        self.imgTextLayout.setContentsMargins(0, 0, 0, 0)
        self.imgTextLayout.setObjectName("imgTextLayout")
        self.originalImageText = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.originalImageText.setFont(font)
        self.originalImageText.setAlignment(QtCore.Qt.AlignCenter)
        self.originalImageText.setObjectName("originalImageText")
        self.imgTextLayout.addWidget(self.originalImageText)
        self.detectImageText_ = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.detectImageText_.setFont(font)
        self.detectImageText_.setAlignment(QtCore.Qt.AlignCenter)
        self.detectImageText_.setObjectName("detectImageText_")
        self.imgTextLayout.addWidget(self.detectImageText_)
        self.segmentImageText = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.segmentImageText.setFont(font)
        self.segmentImageText.setAlignment(QtCore.Qt.AlignCenter)
        self.segmentImageText.setObjectName("segmentImageText")
        self.imgTextLayout.addWidget(self.segmentImageText)
        self.widget1 = QtWidgets.QWidget(Form)
        self.widget1.setGeometry(QtCore.QRect(10, 490, 331, 211))
        self.widget1.setObjectName("widget1")
        self.imgInfoLayout = QtWidgets.QVBoxLayout(self.widget1)
        self.imgInfoLayout.setContentsMargins(0, 0, 0, 0)
        self.imgInfoLayout.setObjectName("imgInfoLayout")
        self.currentImgLayout = QtWidgets.QHBoxLayout()
        self.currentImgLayout.setContentsMargins(-1, -1, 90, -1)
        self.currentImgLayout.setObjectName("currentImgLayout")
        self.currentImageNumberText = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.currentImageNumberText.setFont(font)
        self.currentImageNumberText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.currentImageNumberText.setObjectName("currentImageNumber")
        self.currentImgLayout.addWidget(self.currentImageNumberText)
        self.currentImgNum = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)

        self.currentImgNum.setFont(font)
        self.currentImgNum.setAlignment(QtCore.Qt.AlignCenter)
        self.currentImgNum.setObjectName("currentImgNum")
        self.currentImgLayout.addWidget(self.currentImgNum)
        self.signOfIsolation = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)

        self.signOfIsolation.setFont(font)
        self.signOfIsolation.setAlignment(QtCore.Qt.AlignCenter)
        self.signOfIsolation.setObjectName("signOfIsolation")
        self.currentImgLayout.addWidget(self.signOfIsolation)
        self.folderImageNum = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)

        self.folderImageNum.setFont(font)
        self.folderImageNum.setAlignment(QtCore.Qt.AlignCenter)
        self.folderImageNum.setObjectName("folderImageNum")
        self.currentImgLayout.addWidget(self.folderImageNum)
        self.imgInfoLayout.addLayout(self.currentImgLayout)
        self.gtLayout = QtWidgets.QHBoxLayout()
        self.gtLayout.setObjectName("gtLayout")
        self.typeText = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.typeText.setFont(font)
        self.typeText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.typeText.setObjectName("typeText")
        self.gtLayout.addWidget(self.typeText)
        self.groundTruthTypeText = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.groundTruthTypeText.setFont(font)
        self.groundTruthTypeText.setAlignment(QtCore.Qt.AlignCenter)
        self.groundTruthTypeText.setObjectName("groundTruthTypeText")
        self.gtLayout.addWidget(self.groundTruthTypeText)
        self.imgInfoLayout.addLayout(self.gtLayout)
        self.uncoverLayout = QtWidgets.QHBoxLayout()
        self.uncoverLayout.setContentsMargins(-1, -1, 70, -1)
        self.uncoverLayout.setObjectName("uncoverLayout")
        self.uncoverAPText = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.uncoverAPText.setFont(font)
        self.uncoverAPText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.uncoverAPText.setObjectName("uncoverAPText")
        self.uncoverLayout.addWidget(self.uncoverAPText)
        self.uncoverAPScore = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)

        self.uncoverAPScore.setFont(font)
        self.uncoverAPScore.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.uncoverAPScore.setObjectName("uncoverAPScore")
        self.uncoverLayout.addWidget(self.uncoverAPScore)
        self.imgInfoLayout.addLayout(self.uncoverLayout)
        self.unevenLayout = QtWidgets.QHBoxLayout()
        self.unevenLayout.setContentsMargins(-1, -1, 70, -1)
        self.unevenLayout.setObjectName("unevenLayout")
        self.unevenAPText = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.unevenAPText.setFont(font)
        self.unevenAPText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.unevenAPText.setObjectName("unevenAPText")
        self.unevenLayout.addWidget(self.unevenAPText)
        self.unevenAPScore = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.unevenAPScore.setFont(font)
        self.unevenAPScore.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.unevenAPScore.setObjectName("unevenAPScore")
        self.unevenLayout.addWidget(self.unevenAPScore)
        self.imgInfoLayout.addLayout(self.unevenLayout)
        self.scratchLayout = QtWidgets.QHBoxLayout()
        self.scratchLayout.setContentsMargins(-1, -1, 70, -1)
        self.scratchLayout.setObjectName("scratchLayout")
        self.scratchAPText = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.scratchAPText.setFont(font)
        self.scratchAPText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.scratchAPText.setObjectName("scratchAPText")
        self.scratchLayout.addWidget(self.scratchAPText)
        self.scratchAPScore = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.scratchAPScore.setFont(font)
        self.scratchAPScore.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.scratchAPScore.setObjectName("scratchAPScore")
        self.scratchLayout.addWidget(self.scratchAPScore)
        self.imgInfoLayout.addLayout(self.scratchLayout)
        self.widget2 = QtWidgets.QWidget(Form)
        self.widget2.setGeometry(QtCore.QRect(390, 490, 271, 151))
        self.widget2.setObjectName("widget2")
        self.detectMetricLayout = QtWidgets.QVBoxLayout(self.widget2)
        self.detectMetricLayout.setContentsMargins(0, 0, 0, 0)
        self.detectMetricLayout.setObjectName("detectMetricLayout")
        self.fpsLayout = QtWidgets.QHBoxLayout()
        self.fpsLayout.setContentsMargins(-1, -1, 180, -1)
        self.fpsLayout.setObjectName("fpsLayout")
        self.fpsText = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.fpsText.setFont(font)
        self.fpsText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.fpsText.setObjectName("fpsText")
        self.fpsLayout.addWidget(self.fpsText)
        self.scoreOfFPS = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        self.scoreOfFPS.setFont(font)
        self.scoreOfFPS.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.scoreOfFPS.setObjectName("scoreOfFPS")
        self.fpsLayout.addWidget(self.scoreOfFPS)
        self.detectMetricLayout.addLayout(self.fpsLayout)
        self.predictLayout = QtWidgets.QHBoxLayout()
        self.predictLayout.setContentsMargins(-1, -1, 0, -1)
        self.predictLayout.setObjectName("predictLayout")
        self.predictText = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.predictText.setFont(font)
        self.predictText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.predictText.setObjectName("predictText")
        self.predictLayout.addWidget(self.predictText)
        self.predictTypeText = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)

        self.predictTypeText.setFont(font)
        self.predictTypeText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.predictTypeText.setObjectName("predictTypeText")
        self.predictLayout.addWidget(self.predictTypeText)
        self.detectMetricLayout.addLayout(self.predictLayout)
        self.iouLayout = QtWidgets.QHBoxLayout()
        self.iouLayout.setContentsMargins(-1, -1, 180, -1)
        self.iouLayout.setObjectName("iouLayout")
        self.iouText = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)
        font.setUnderline(True)
        self.iouText.setFont(font)
        self.iouText.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.iouText.setObjectName("iouText")
        self.iouLayout.addWidget(self.iouText)
        self.scoreOfIoU = QtWidgets.QLabel(self.widget2)
        font = QtGui.QFont()
        font.setFamily("IBM Plex Sans")
        font.setPointSize(18)

        self.scoreOfIoU.setFont(font)
        self.scoreOfIoU.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.scoreOfIoU.setObjectName("scoreOfIoU")
        self.iouLayout.addWidget(self.scoreOfIoU)
        self.detectMetricLayout.addLayout(self.iouLayout)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.selectFolderBtn.setText(_translate("Form", "Select Image Folder"))
        self.detectDefectsBtn.setText(_translate("Form", "Detect Defects"))
        self.segmentBtn.setText(_translate("Form", "Segment"))
        self.diceCoefficientText.setText(
            _translate("Form", "Dice Coefficient:"))
        self.scoreOfDC.setText(_translate("Form", "-"))
        self.originalImageText.setText(_translate("Form", "Original Image"))
        self.detectImageText_.setText(_translate("Form", "Detect Image"))
        self.segmentImageText.setText(_translate("Form", "Segment Image"))
        self.currentImageNumberText.setText(
            _translate("Form", "CurrentImage:"))
        self.currentImgNum.setText(_translate("Form", "-"))
        self.signOfIsolation.setText(_translate("Form", "/"))
        self.folderImageNum.setText(_translate("Form", "-"))
        self.typeText.setText(_translate("Form", "Type(Ground Truth):"))
        self.groundTruthTypeText.setText(_translate("Form", "-"))
        self.uncoverAPText.setText(_translate("Form", "AP50(uncover):"))
        self.uncoverAPScore.setText(_translate("Form", "-"))
        self.unevenAPText.setText(_translate("Form", "AP50(uneven):"))
        self.unevenAPScore.setText(_translate("Form", "-"))
        self.scratchAPText.setText(_translate("Form", "AP50(Scratch):"))
        self.scratchAPScore.setText(_translate("Form", "-"))
        self.fpsText.setText(_translate("Form", "FPS:"))
        self.scoreOfFPS.setText(_translate("Form", "-"))
        self.predictText.setText(_translate("Form", "Predict:"))
        self.predictTypeText.setText(_translate("Form", "-"))
        self.iouText.setText(_translate("Form", "IoU:"))
        self.scoreOfIoU.setText(_translate("Form", "-"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
